import os

parent_dir = f"{__file__[:__file__.rfind('/')]}/../"
instruments_dir = os.path.join(parent_dir, 'instruments')

print(f"Generating instrument lookup table from {instruments_dir}")

def generate_audio_lut():
    absolute_paths = []
    instrument_categories = None
    sounds_by_category = {}
    
    for i, (root, dirs, files) in enumerate(os.walk(instruments_dir)):
        if i == 0:
            instrument_categories = dirs
            sounds_by_category = {instrument_name : [] for instrument_name in instrument_categories}
            continue
        
        for filename in files:
            # Check if the file has a .wav extension
            if filename.endswith('.wav'):
                # Get the absolute path and write it to the file
                abs_path = os.path.abspath(os.path.join(root, filename))
                absolute_paths.append(abs_path)
                category = root.split('/')[-1]
                sounds_by_category[category].append(filename)
    
    page_offsets = {instrument_name : 0 for instrument_name in sounds_by_category}
    offset = 0
    for instrument_name in instrument_categories:
        page_offsets[instrument_name] = offset
        offset += len(sounds_by_category[instrument_name])
        
    # Generate a header file to use as a const LUT
    lines = []
    lines.append("// This file is auto-generated by instrument_lut_gen.py -- do not edit directy\n\n")
    lines.append(f"const int NUM_CATEGORIES = {len(sounds_by_category)};\n")
    lines.append(f"const int NUM_INSTRUMENTS = {len(absolute_paths)};\n\n")

    lines.append(f"const char *INSTRUMENT_CAT_ID_TO_NAME_LUT[{len(sounds_by_category)}] = {{\n")
    
    for instrument_name in instrument_categories:
        lines.append(f"  \"{instrument_name}\",\n")
    lines.append("}; // lut[cat_id] = instrument category name\n\n")
    
    lines.append(f"const char *INSTRUMENT_ID_TO_NAME_LUT[{offset}] = {{\n")
    
    for instrument_name in sounds_by_category:
        for file_name in sounds_by_category[instrument_name]:
            lines.append(f"  \"{file_name.removesuffix('.wav')}\",\n")
    lines.append("}; // lut[instrument_id] = instrument name\n\n")
    
    lines.append(f"const int INSTRUMENT_CAT_INFO_LUT[{len(sounds_by_category)}][2] = {{\n")
    for instrument_name in instrument_categories:
        lines.append(f" {{{page_offsets[instrument_name]}, {len(sounds_by_category[instrument_name])}}},\n")
    lines.append("}; // lut[cat_id][0] = starting instrument ID, lut[cat_id][1] = number of instruments in category\n\n")
    
    # Add the absolute paths to the lookup table
    lines.append(f"const char *ABSOLUTE_PATHS[{len(absolute_paths)}] = {{\n")
    for fpath in absolute_paths:
        lines.append(f"  \"{fpath}\",\n")
    lines.append("}; // lut[instrument_id] = absolute filepath to .wav sample\n\n")
    
    # Insert header guards and write to file
    lines.insert(0, "#ifndef INSTRUMENT_LUT_H\n#define INSTRUMENT_LUT_H\n\n")
    lines.append("#endif\n")
    
    lookup_table_fpath = os.path.join(parent_dir, "include/InstrumentLUT.h")
    with open(lookup_table_fpath, "w") as f:
        f.writelines(lines)

if __name__ == "__main__":
    generate_audio_lut()